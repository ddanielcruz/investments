generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Asset {
  @@map("assets")
  id Int @default(autoincrement()) @id
  name String
  ticker String @unique
  type AssetType
  transactions Transaction[]
  symbols AssetSymbol[]
  metrics AssetMetrics?
}

model AssetSymbol {
  @@map("assets_symbols")
  id Int @default(autoincrement()) @id
  assetId Int @map("asset_id")
  symbol String
  provider AssetProvider
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Broker {
  @@map("brokers")
  id Int @default(autoincrement()) @id
  name String @unique
  supportedTypes AssetType[]
  transactions Transaction[]
}

model Transaction {
  @@map("transactions")
  id Int @default(autoincrement()) @id
  assetId Int @map("asset_id")
  brokerId Int @map("broker_id")
  unitPrice Float @map("unit_price")
  quantity Float
  fee Float
  date DateTime
  type TransactionType
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Restrict)
  broker Broker @relation(fields: [brokerId], references: [id], onDelete: Restrict)
}

model AssetMetrics {
  @@map("assets_metrics")
  id Int @default(autoincrement()) @id
  assetId Int @map("asset_id") @unique
  marketPrice Float @map("market_price")
  quantity Float
  totalInvested Float @map("total_invested")
  totalEquity Float @map("total_equity")
  return Float
  returnPercentage Float @map("return_percentage")
  averagePrice Float @map("average_price")
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}


enum AssetType {
  Stock
  Crypto
  FixedIncome
}

enum AssetProvider {
  CoinMarketcap
  AlphaVantage
}

enum TransactionType {
  Buy
  Sell
}
